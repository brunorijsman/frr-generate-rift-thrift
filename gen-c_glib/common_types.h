/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef COMMON_TYPES_H
#define COMMON_TYPES_H

/* base includes */
#include <glib-object.h>
#include <thrift/c_glib/thrift_struct.h>
#include <thrift/c_glib/protocol/thrift_protocol.h>

/* custom thrift includes */

/* begin types */

enum _HierarchyIndications {
  HIERARCHY_INDICATIONS_leaf_only = 0,
  HIERARCHY_INDICATIONS_leaf_only_and_leaf_2_leaf_procedures = 1,
  HIERARCHY_INDICATIONS_top_of_fabric = 2
};
typedef enum _HierarchyIndications HierarchyIndications;

/* return the name of the constant */
const char *
toString_HierarchyIndications(int value); 

enum _TieDirectionType {
  TIE_DIRECTION_TYPE_Illegal = 0,
  TIE_DIRECTION_TYPE_South = 1,
  TIE_DIRECTION_TYPE_North = 2,
  TIE_DIRECTION_TYPE_DirectionMaxValue = 3
};
typedef enum _TieDirectionType TieDirectionType;

/* return the name of the constant */
const char *
toString_TieDirectionType(int value); 

enum _AddressFamilyType {
  ADDRESS_FAMILY_TYPE_Illegal = 0,
  ADDRESS_FAMILY_TYPE_AddressFamilyMinValue = 1,
  ADDRESS_FAMILY_TYPE_IPv4 = 2,
  ADDRESS_FAMILY_TYPE_IPv6 = 3,
  ADDRESS_FAMILY_TYPE_AddressFamilyMaxValue = 4
};
typedef enum _AddressFamilyType AddressFamilyType;

/* return the name of the constant */
const char *
toString_AddressFamilyType(int value); 

enum _TIETypeType {
  T_I_E_TYPE_TYPE_Illegal = 0,
  T_I_E_TYPE_TYPE_TIETypeMinValue = 1,
  T_I_E_TYPE_TYPE_NodeTIEType = 2,
  T_I_E_TYPE_TYPE_PrefixTIEType = 3,
  T_I_E_TYPE_TYPE_PositiveDisaggregationPrefixTIEType = 4,
  T_I_E_TYPE_TYPE_NegativeDisaggregationPrefixTIEType = 5,
  T_I_E_TYPE_TYPE_PGPrefixTIEType = 6,
  T_I_E_TYPE_TYPE_KeyValueTIEType = 7,
  T_I_E_TYPE_TYPE_ExternalPrefixTIEType = 8,
  T_I_E_TYPE_TYPE_TIETypeMaxValue = 9
};
typedef enum _TIETypeType TIETypeType;

/* return the name of the constant */
const char *
toString_TIETypeType(int value); 

enum _RouteType {
  ROUTE_TYPE_Illegal = 0,
  ROUTE_TYPE_RouteTypeMinValue = 1,
  ROUTE_TYPE_Discard = 2,
  ROUTE_TYPE_LocalPrefix = 3,
  ROUTE_TYPE_SouthPGPPrefix = 4,
  ROUTE_TYPE_NorthPGPPrefix = 5,
  ROUTE_TYPE_NorthPrefix = 6,
  ROUTE_TYPE_NorthExternalPrefix = 7,
  ROUTE_TYPE_SouthPrefix = 8,
  ROUTE_TYPE_SouthExternalPrefix = 9,
  ROUTE_TYPE_NegativeSouthPrefix = 10,
  ROUTE_TYPE_RouteTypeMaxValue = 11
};
typedef enum _RouteType RouteType;

/* return the name of the constant */
const char *
toString_RouteType(int value); 

typedef gint64 SystemIDType;

typedef gint32 IPv4Address;

typedef GByteArray * IPv6Address;

typedef gint16 UDPPortType;

typedef gint32 TIENrType;

typedef gint32 MTUSizeType;

typedef gint16 SeqNrType;

typedef gint32 LifeTimeInSecType;

typedef gint8 LevelType;

typedef gint16 PacketNumberType;

typedef gint32 PodType;

typedef gint8 VersionType;

typedef gint16 MinorVersionType;

typedef gint32 MetricType;

typedef gint64 RouteTagType;

typedef gint32 LabelType;

typedef gint32 BandwithInMegaBitsType;

typedef gchar * KeyIDType;

typedef gint32 LinkIDType;

typedef gchar * KeyNameType;

typedef gint8 PrefixLenType;

typedef gint64 TimestampInSecsType;

typedef gint16 NonceType;

typedef gint16 TimeIntervalInSecType;

typedef gint8 PrefixTransactionIDType;

/* struct IEEE802_1ASTimeStampType */
struct _IEEE802_1ASTimeStampType
{ 
  ThriftStruct parent; 

  /* public */
  gint64 AS_sec;
  gint32 AS_nsec;
  gboolean __isset_AS_nsec;
};
typedef struct _IEEE802_1ASTimeStampType IEEE802_1ASTimeStampType;

struct _IEEE802_1ASTimeStampTypeClass
{
  ThriftStructClass parent;
};
typedef struct _IEEE802_1ASTimeStampTypeClass IEEE802_1ASTimeStampTypeClass;

GType i_e_e_e802_1_a_s_time_stamp_type_get_type (void);
#define TYPE_I_E_E_E802_1_A_S_TIME_STAMP_TYPE (i_e_e_e802_1_a_s_time_stamp_type_get_type())
#define I_E_E_E802_1_A_S_TIME_STAMP_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I_E_E_E802_1_A_S_TIME_STAMP_TYPE, IEEE802_1ASTimeStampType))
#define I_E_E_E802_1_A_S_TIME_STAMP_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I_E_E_E802_1_A_S_TIME_STAMP_TYPE, IEEE802_1ASTimeStampTypeClass))
#define IS_I_E_E_E802_1_A_S_TIME_STAMP_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I_E_E_E802_1_A_S_TIME_STAMP_TYPE))
#define IS_I_E_E_E802_1_A_S_TIME_STAMP_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I_E_E_E802_1_A_S_TIME_STAMP_TYPE))
#define I_E_E_E802_1_A_S_TIME_STAMP_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I_E_E_E802_1_A_S_TIME_STAMP_TYPE, IEEE802_1ASTimeStampTypeClass))

/* struct IPv4PrefixType */
struct _IPv4PrefixType
{ 
  ThriftStruct parent; 

  /* public */
  gint32 address;
  gint8 prefixlen;
};
typedef struct _IPv4PrefixType IPv4PrefixType;

struct _IPv4PrefixTypeClass
{
  ThriftStructClass parent;
};
typedef struct _IPv4PrefixTypeClass IPv4PrefixTypeClass;

GType i_pv4_prefix_type_get_type (void);
#define TYPE_I_PV4_PREFIX_TYPE (i_pv4_prefix_type_get_type())
#define I_PV4_PREFIX_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I_PV4_PREFIX_TYPE, IPv4PrefixType))
#define I_PV4_PREFIX_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I_PV4_PREFIX_TYPE, IPv4PrefixTypeClass))
#define IS_I_PV4_PREFIX_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I_PV4_PREFIX_TYPE))
#define IS_I_PV4_PREFIX_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I_PV4_PREFIX_TYPE))
#define I_PV4_PREFIX_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I_PV4_PREFIX_TYPE, IPv4PrefixTypeClass))

/* struct IPv6PrefixType */
struct _IPv6PrefixType
{ 
  ThriftStruct parent; 

  /* public */
  GByteArray * address;
  gint8 prefixlen;
};
typedef struct _IPv6PrefixType IPv6PrefixType;

struct _IPv6PrefixTypeClass
{
  ThriftStructClass parent;
};
typedef struct _IPv6PrefixTypeClass IPv6PrefixTypeClass;

GType i_pv6_prefix_type_get_type (void);
#define TYPE_I_PV6_PREFIX_TYPE (i_pv6_prefix_type_get_type())
#define I_PV6_PREFIX_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I_PV6_PREFIX_TYPE, IPv6PrefixType))
#define I_PV6_PREFIX_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I_PV6_PREFIX_TYPE, IPv6PrefixTypeClass))
#define IS_I_PV6_PREFIX_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I_PV6_PREFIX_TYPE))
#define IS_I_PV6_PREFIX_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I_PV6_PREFIX_TYPE))
#define I_PV6_PREFIX_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I_PV6_PREFIX_TYPE, IPv6PrefixTypeClass))

/* struct IPAddressType */
struct _IPAddressType
{ 
  ThriftStruct parent; 

  /* public */
  gint32 ipv4address;
  gboolean __isset_ipv4address;
  GByteArray * ipv6address;
  gboolean __isset_ipv6address;
};
typedef struct _IPAddressType IPAddressType;

struct _IPAddressTypeClass
{
  ThriftStructClass parent;
};
typedef struct _IPAddressTypeClass IPAddressTypeClass;

GType i_p_address_type_get_type (void);
#define TYPE_I_P_ADDRESS_TYPE (i_p_address_type_get_type())
#define I_P_ADDRESS_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I_P_ADDRESS_TYPE, IPAddressType))
#define I_P_ADDRESS_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I_P_ADDRESS_TYPE, IPAddressTypeClass))
#define IS_I_P_ADDRESS_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I_P_ADDRESS_TYPE))
#define IS_I_P_ADDRESS_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I_P_ADDRESS_TYPE))
#define I_P_ADDRESS_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I_P_ADDRESS_TYPE, IPAddressTypeClass))

/* struct IPPrefixType */
struct _IPPrefixType
{ 
  ThriftStruct parent; 

  /* public */
  IPv4PrefixType * ipv4prefix;
  gboolean __isset_ipv4prefix;
  IPv6PrefixType * ipv6prefix;
  gboolean __isset_ipv6prefix;
};
typedef struct _IPPrefixType IPPrefixType;

struct _IPPrefixTypeClass
{
  ThriftStructClass parent;
};
typedef struct _IPPrefixTypeClass IPPrefixTypeClass;

GType i_p_prefix_type_get_type (void);
#define TYPE_I_P_PREFIX_TYPE (i_p_prefix_type_get_type())
#define I_P_PREFIX_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_I_P_PREFIX_TYPE, IPPrefixType))
#define I_P_PREFIX_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_I_P_PREFIX_TYPE, IPPrefixTypeClass))
#define IS_I_P_PREFIX_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_I_P_PREFIX_TYPE))
#define IS_I_P_PREFIX_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_I_P_PREFIX_TYPE))
#define I_P_PREFIX_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_I_P_PREFIX_TYPE, IPPrefixTypeClass))

/* struct PrefixSequenceType */
struct _PrefixSequenceType
{ 
  ThriftStruct parent; 

  /* public */
  IEEE802_1ASTimeStampType * timestamp;
  gint8 transactionid;
  gboolean __isset_transactionid;
};
typedef struct _PrefixSequenceType PrefixSequenceType;

struct _PrefixSequenceTypeClass
{
  ThriftStructClass parent;
};
typedef struct _PrefixSequenceTypeClass PrefixSequenceTypeClass;

GType prefix_sequence_type_get_type (void);
#define TYPE_PREFIX_SEQUENCE_TYPE (prefix_sequence_type_get_type())
#define PREFIX_SEQUENCE_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_PREFIX_SEQUENCE_TYPE, PrefixSequenceType))
#define PREFIX_SEQUENCE_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_PREFIX_SEQUENCE_TYPE, PrefixSequenceTypeClass))
#define IS_PREFIX_SEQUENCE_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_PREFIX_SEQUENCE_TYPE))
#define IS_PREFIX_SEQUENCE_TYPE_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_PREFIX_SEQUENCE_TYPE))
#define PREFIX_SEQUENCE_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_PREFIX_SEQUENCE_TYPE, PrefixSequenceTypeClass))

/* constants */
#define UNDEFINED_PACKET_NUMBER NULL /* not supported */
#define TOP_OF_FABRIC_LEVEL NULL /* not supported */
#define DEFAULT_BANDWIDTH NULL /* not supported */
#define LEAF_LEVEL NULL /* not supported */
#define DEFAULT_LEVEL NULL /* not supported */
#define DEFAULT_POD NULL /* not supported */
#define UNDEFINED_LINKID NULL /* not supported */
#define DEFAULT_DISTANCE NULL /* not supported */
#define INFINITE_DISTANCE NULL /* not supported */
#define INVALID_DISTANCE NULL /* not supported */
#define OVERLOAD_DEFAULT 0
#define FLOOD_REDUCTION_DEFAULT 1
#define DEFAULT_LIE_HOLDTIME NULL /* not supported */
#define DEFAULT_ZTP_HOLDTIME NULL /* not supported */
#define DEFAULT_NOT_A_ZTP_OFFER 0
#define DEFAULT_YOU_ARE_FLOOD_REPEATER 1
#define ILLEGALSYSTEMID NULL /* not supported */
GHashTable *empty_set_of_nodeids_constant();
#define EMPTY_SET_OF_NODEIDS (empty_set_of_nodeids_constant())
#define DEFAULT_LIFETIME NULL /* not supported */
#define PURGE_LIFETIME NULL /* not supported */
#define ROUNDDOWN_LIFETIME_INTERVAL NULL /* not supported */
#define LIFETIME_DIFF2IGNORE NULL /* not supported */
#define DEFAULT_LIE_UDP_PORT NULL /* not supported */
#define DEFAULT_TIE_UDP_FLOOD_PORT NULL /* not supported */
#define DEFAULT_MTU_SIZE NULL /* not supported */
#define BFD_DEFAULT 1
#define UNDEFINED_NONCE NULL /* not supported */
#define MAXIMUM_VALID_NONCE_DELTA 5

#endif /* COMMON_TYPES_H */
